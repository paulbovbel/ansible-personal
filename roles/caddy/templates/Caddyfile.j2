{
  email {{ ansible_email }}

	order authenticate before respond
	order authorize before basicauth

  security {
    oauth identity provider google {
      realm google
      driver google
      client_id {{ google_oauth2_client_id }}
      client_secret {{ google_oauth2_client_secret }}
      scopes openid email profile
    }

    authentication portal defaultportal {
      crypto default token lifetime 7884000
      crypto key sign-verify {{ caddy.token_secret }}
      enable identity provider google
      cookie domain bovbel.com
      cookie lifetime 7884000

{% for user in caddy.users %}
      transform user {
        match realm google
        match email {{ user.email }}
  {% for role in user.roles %}
        action add role authp/{{ role }}
  {% endfor %}
      }
{% endfor %}

    }

{% for role in caddy.roles %}
    authorization policy {{ role }} {
      set auth url /auth/oauth2/google
      crypto key verify {{ caddy.token_secret }}
      allow roles authp/{{ role }}
      validate bearer header
      inject headers with claims
      enable js redirect
    }
{% endfor %}
  }
}

{{ ansible_hostname }}.{{ tailscale.MagicDNSSuffix }}, {{ inventory_hostname }} {
  log {
      level ERROR
      format console {
        time_format wall
      }
      output file /data/log/error.log
  }

  tls {
    dns route53 {
      access_key_id "{{ aws_access_key_id }}"
      secret_access_key "{{ aws_secret_access_key }}"
    }
  }

  route / {

  {% if caddy.redirect is defined %}
    redir / {{ caddy.redirect }}
  {% endif %}

  }

  route /auth* {
    authenticate with defaultportal
  }

{% for endpoint in caddy.endpoints.values() %}
  redir {{ endpoint.path }} {{ endpoint.path }}/

  route {{ endpoint.path }}* {
  {% if endpoint.auth == "oauth" %}
    authorize with {{ endpoint.role }}
  {% elif endpoint.auth == "basic" %}
    basicauth {
      {{ endpoint.user }} {{ endpoint.password | password_hash('bcrypt') | b64encode }}
    }
  {% endif %}

  {% if endpoint.type == "share" or endpoint.strip_prefix | default(false) %}
    uri strip_prefix {{ endpoint.path }}
  {% endif %}

  {% if endpoint.type == "proxy" %}
    reverse_proxy * {{ endpoint.scheme | default('http') }}://{{ endpoint.host }}:{{ endpoint.port }} {

    {% if endpoint.scheme | default('http') == "https" %}
      transport http {
          tls_insecure_skip_verify
      }
    {% endif %}

    {% for header in endpoint.header_up | default ([]) %}
      header_up {{ header }}
    {% endfor %}
    {% if endpoint.spoof_basic | default(false) %}
      header_up +Authorization "Basic {{ (web_user + ":" + web_password) | b64encode }}"
    {% endif %}
    }

  {% elif endpoint.type == "share" %}
    root * {{ endpoint.path }}
    file_server {
        browse
        hide .*
    }
  {% endif %}
  }

{% endfor %}
}
